import streamlit as st  
import pandas as pd  
import plotly.graph_objects as go  
import plotly.express as px  
from datetime import datetime  

class AnalisadorCompraVeiculo:  
    def __init__(self, renda_mensal, patrimonio):  
        self.renda_mensal = renda_mensal  
        self.patrimonio = patrimonio  
        self.limite_mensal = self.renda_mensal * 0.30  

    def calcular_custos_fixos(self, valor_carro):  
        custos = {  
            'Combust√≠vel': 300,  
            'Seguro': valor_carro * 0.04 / 12,  
            'IPVA': valor_carro * 0.04 / 12,  
            'Manuten√ß√£o': valor_carro * 0.02 / 12  
        }  
        return custos  

    def calcular_valor_financiamento(self, taxa_juros_anual, prazo_meses):  
        taxa_mensal = taxa_juros_anual / 12 / 100  
        custos_fixos = sum(self.calcular_custos_fixos(40000).values())  
        parcela_maxima = self.limite_mensal - custos_fixos  
        valor_financiamento = parcela_maxima * (1 - (1 + taxa_mensal) ** -prazo_meses) / taxa_mensal  
        return valor_financiamento  

def criar_grafico_custos(custos):  
    fig = px.pie(  
        values=list(custos.values()),  
        names=list(custos.keys()),  
        title='Distribui√ß√£o dos Custos Mensais'  
    )  
    return fig  

def criar_grafico_financiamento(df):  
    fig = px.line(  
        df,  
        x='Prazo',  
        y='Valor Financi√°vel',  
        color='Taxa',  
        title='Valores Financi√°veis por Prazo e Taxa',  
        labels={'Prazo': 'Prazo (meses)', 'Valor Financi√°vel': 'Valor M√°ximo Financi√°vel (R$)'}  
    )  
    return fig  

def main():  
    st.set_page_config(page_title="An√°lise de Compra de Ve√≠culo", layout="wide")  

    # T√≠tulo e descri√ß√£o  
    st.title("üìä Analisador de Compra de Ve√≠culo")  
    st.markdown("""  
    Esta ferramenta ajuda voc√™ a analisar diferentes cen√°rios para compra de um ve√≠culo,  
    considerando sua renda mensal e patrim√¥nio dispon√≠vel.  
    """)  

    # Sidebar para inputs  
    with st.sidebar:  
        st.header("Dados Financeiros")  
        renda_mensal = st.number_input("Renda Mensal (R$)", min_value=0.0, value=5000.0, step=100.0)  
        patrimonio = st.number_input("Patrim√¥nio Total (R$)", min_value=0.0, value=10000.0, step=1000.0)  

        st.header("Personalizar An√°lise")  
        valor_carro_exemplo = st.number_input("Valor do Carro para An√°lise (R$)", min_value=0.0, value=40000.0, step=1000.0)  

    # Criar inst√¢ncia do analisador  
    analise = AnalisadorCompraVeiculo(renda_mensal, patrimonio)  

    # Mostrar informa√ß√µes b√°sicas  
    col1, col2, col3 = st.columns(3)  
    with col1:  
        st.metric("Limite Mensal (30% da renda)", f"R$ {analise.limite_mensal:.2f}")  
    with col2:  
        st.metric("M√°ximo √† Vista (10% do patrim√¥nio)", f"R$ {patrimonio * 0.1:.2f}")  
    with col3:  
        st.metric("Custos Fixos Estimados", f"R$ {sum(analise.calcular_custos_fixos(valor_carro_exemplo).values()):.2f}")  

    # An√°lise de Custos  
    st.header("üìà An√°lise de Custos Mensais")  
    custos = analise.calcular_custos_fixos(valor_carro_exemplo)  
    col1, col2 = st.columns([2, 1])  

    with col1:  
        st.plotly_chart(criar_grafico_custos(custos), use_container_width=True)  

    with col2:  
        st.subheader("Detalhamento dos Custos")  
        for item, valor in custos.items():  
            st.write(f"{item}: R$ {valor:.2f}")  

    # Cen√°rios de Financiamento  
    st.header("üí∞ Cen√°rios de Financiamento")  

    # Criar DataFrame com cen√°rios  
    dados = []  
    taxas = [12, 15, 18, 23]  
    prazos = [36, 48, 60]  

    for taxa in taxas:  
        for prazo in prazos:  
            valor = analise.calcular_valor_financiamento(taxa, prazo)  
            dados.append({  
                'Taxa': f'{taxa}%',  
                'Prazo': prazo,  
                'Valor Financi√°vel': valor  
            })  

    df = pd.DataFrame(dados)  

    # Mostrar gr√°fico de cen√°rios  
    st.plotly_chart(criar_grafico_financiamento(df), use_container_width=True)  

    # Mostrar tabela de cen√°rios  
    st.subheader("Tabela de Cen√°rios")  
    st.dataframe(df.style.format({'Valor Financi√°vel': 'R$ {:,.2f}'}))  

    # Recomenda√ß√µes  
    st.header("üìã Recomenda√ß√µes")  
    recomendacoes = [  
        "Procure carros usados para evitar deprecia√ß√£o inicial",  
        "Compare diferentes op√ß√µes de financiamento",  
        "Considere fazer uma entrada maior para reduzir juros",  
        "Mantenha uma reserva de emerg√™ncia para manuten√ß√£o",  
    ]  

    if patrimonio * 0.1 < 10000:  
        recomendacoes.insert(0, "Considere juntar mais dinheiro antes de comprar √† vista")  

    for rec in recomendacoes:  
        st.write(f"‚Ä¢ {rec}")  

    # Footer  
    st.markdown("---")  
    st.markdown(  
        """  
        <div style='text-align: center'>  
            <p>Desenvolvido com ‚ù§Ô∏è | √öltima atualiza√ß√£o: Dezembro 2023</p>  
        </div>  
        """,  
        unsafe_allow_html=True  
    )  

if __name__ == "__main__":  
    main()  

# Requirements (save as requirements.txt):  
# streamlit  
# pandas  
# plotly  
